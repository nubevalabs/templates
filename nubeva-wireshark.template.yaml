AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  APIKey:
    Description: "The Token for your Prisms account"
    Type: String
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC to install into.
  RemoteAccessCIDR:
    Type: String
    Description: The CIDR notation of address to access this tool
  PrivateSubnet1ID:
    Description: Subnet Id for Private Subnet1
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: Subnet Id for Private Subnet2
    Type: AWS::EC2::Subnet::Id
  NumberOfNodes:
    Description: 'The number of EC2 instances'
    Type: Number
    Default: 2
  MaximumNodes:
    Type: Number
    Default: '6'
    Description: Maximum number of instances that can be launched in your tool cluster.
  NodeInstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.xlarge
    AllowedValues: [t3.xlarge, t3.2xlarge, m5.xlarge, m5.2xlarge,
      m5.4xlarge, m5.12xlarge, m5.24xlarge, c5.xlarge, c5.2xlarge, c5.4xlarge,
      c5.8xlarge, r5.xlarge, r5.2xlarge, r5.4xlarge, r5.12xlarge,
      r5.24xlarge, i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge, i3.16xlarge]
    ConstraintDescription: Please choose a valid instance type.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VPCID
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - RemoteAccessCIDR
      - Label:
          default: "Autoscaling Configuration"
        Parameters:
          - KeyPairName
          - NodeInstanceType
          - NumberOfNodes
          - MaximumNodes

Mappings:
  AWSAMIRegionMap:
    #AMI:
      #ubuntu1804: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    ap-east-1:
      ubuntu1804: "ami-e0ff8491"
    ap-northeast-1:
      ubuntu1804: "ami-0cb1c8cab7f5249b6"
    ap-northeast-2:
      ubuntu1804: "ami-081626bfb3fbc9f49"
    ap-south-1:
      ubuntu1804: "ami-0cf8402efdb171312"
    ap-southeast-1:
      ubuntu1804: "ami-099d318f80eab7e94"
    ap-southeast-2:
      ubuntu1804: "ami-08a648fb5cc86fb74"
    eu-central-1:
      ubuntu1804: "ami-0cdab515472ca0bac"
    eu-north-1:
      ubuntu1804: "ami-c37bf0bd"
    eu-west-1:
      ubuntu1804: "ami-01cca82393e531118"
    eu-west-2:
      ubuntu1804: "ami-0a7c91b6616d113b1"
    eu-west-3:
      ubuntu1804: "ami-033e0056c336ecff0"
    us-east-1:
      ubuntu1804: "ami-064a0193585662d74"
    us-east-2:
      ubuntu1804: "ami-021b7b04f1ac696c2"
    us-west-1:
      ubuntu1804: "ami-056d04da775d124d7"
    us-west-2:
      ubuntu1804: "ami-09a3d8a7177216dcf"
    ca-central-1:
      ubuntu1804: "ami-0bc1dd4eb012a451e"
    sa-east-1:
      ubuntu1804: "ami-094c359b4d8c6a8ca"

Resources:
  # The Security Group placed on the tools themselves
  ToolSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Tool Security Group
      VpcId: !Ref 'VPCID'
  # Inbound- allow ssh
  SecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "ToolSecurityGroup"
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: !Ref "RemoteAccessCIDR"
  # Inbound- allow VXLAN
  ToolSecurityGroupVXLANinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "ToolSecurityGroup"
      CidrIp: !Ref "RemoteAccessCIDR"
      IpProtocol: udp
      FromPort: '4789'
      ToPort: '4789'
  # Inbound- allow RDP
  ToolSecurityGroupntopinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "ToolSecurityGroup"
      IpProtocol: tcp
      FromPort: '3389'
      ToPort: '3389'
      CidrIp: !Ref "RemoteAccessCIDR"
  # Outbound- allow all
  ToolSecurityGroupOutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref "ToolSecurityGroup"
      CidrIp: 0.0.0.0/0
      IpProtocol: "-1"
      FromPort: '-1'
      ToPort: '-1'

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRole

  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: asg
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'autoscaling:DescribeAutoScalingGroups'
            - 'autoscaling:DescribeAutoScalingInstances'
            - 'ec2:DescribeInstances'
            Resource:
            - '*'

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref PrivateSubnet1ID
      - !Ref PrivateSubnet2ID
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 0
      MaxSize: !Ref 'MaximumNodes'
      DesiredCapacity: !Ref 'NumberOfNodes'
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupInServiceInstances
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}
        PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 0
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref NumberOfNodes
        MaxBatchSize: '1'
        PauseTime: PT5M
        SuspendProcesses:
        - AlarmNotification
        WaitOnResourceSignals: 'true'

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Configure:
            - "configStartup"
          Install:
            - "installServices"
            - "installNurxAgent"
          Start:
            - "startUpdate"

        configStartup:
          commands:
            01_chmod:
              command: "chmod +x /etc/rc.d/rc.local"
        installServices:
          packages:
            apt:
              wireshark: []
              docker.io: []
              lxde: []
              xrdp: []
          services:
            sysvinit:
              rc.local:
                enabled: true
              docker:
                enabled: true
                ensureRunning: true
        installNurxAgent:
          commands:
            01_download_and_install:
              command:
                !Sub |
                  docker run -v /:/host -v /var/run/docker.sock:/var/run/docker.sock --cap-add NET_ADMIN --name nubeva-rx -d --restart=on-failure --net=host nubeva/nurx --accept-eula --nutoken ${APIKey}
        startUpdate:
          commands:
            01_addsrclocalupdate:
              command: "echo 'apt-get update -y' >> /etc/rc.local"


    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          apt-get update
          apt-get install python3-pip
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",

          #yum update -y aws-cfn-bootstrap
          # how do I get correct region variable
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration --configsets Configure,Install,Start
          # don't know how to get a signal # has something to do with minnimums on autoscale-0 works, 1 doesn't
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
      InstanceType: !Ref NodeInstanceType
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - ubuntu1804
      SecurityGroups:
      - !Ref "ToolSecurityGroup"
      IamInstanceProfile: !Ref InstanceProfile
      KeyName:
        Ref: KeyPairName
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: "100"


#Outputs:
#  URL:
#    Description: "The URL of this instance's Moloch Dashboard"
#    Value: !Sub "http://${MyServerInstance.PublicIp}:8005"
