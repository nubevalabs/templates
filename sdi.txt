#setup initial docker instance
docker run -dti --name nat --privileged alpine sh
docker exec -ti nat sh
apk add bash iptables iproute2 # iproute2 is for /sbin/tc
exit
#link docker networking
pid=$(docker inspect -f '{{.State.Pid}}' nat)
mkdir -p /var/run/netns/
ln -sfT /proc/$pid/ns/net /var/run/netns/nat
# now you can use it as a namespace…otherwise hidden by docker
ip netns exec nat ip -s link show eth0
# now create veth pair between host namespace and docker (nat) namespace
ip link add sdi0 type veth peer name sdi1
# now set sdi1 to go into the docker container “nat” namespace
ip link set sdi1 netns nat
ip link set sdi0 up
ip netns exec nat ip link set sdi1 up
# now send everything from nurx0 to sdi0 using tc…use commands at beginning of this doc to clear out tc if you have commands there.
tc qdisc add dev nurx0 ingress
tc filter add dev nurx0 parent ffff: protocol all prio 2 u32 match u32 0 0 flowid 1:1 action mirred egress mirror dev sdi0
tc qdisc replace dev nurx0 parent root handle 10: prio
tc filter add dev nurx0 parent 10: protocol all prio 2 u32 match u32 0 0 flowid 10:1 action mirred egress mirror dev sdi0
#  now create vxlan device in nat namespace and then use tc in nat namespace to send everything from sdi1 to vxlan device…and we should be done.
docker exec -ti nat bash
ip link add vxlan type vxlan id 2 remote 10.10.2.111 dev eth0 dstport 4789
ifconfig vxlan up
tc qdisc add dev sdi1 ingress
tc filter add dev sdi1 parent ffff: protocol all prio 2 u32 match u32 0 0 flowid 1:1 action mirred egress mirror dev vxlan
tc qdisc replace dev sdi1 parent root handle 10: prio
tc filter add dev sdi1 parent 10: protocol all prio 2 u32 match u32 0 0 flowid 10:1 action mirred egress mirror dev vxlan
exit
