AWSTemplateFormatVersion: '2010-09-09'
Description: 'Docker'

Parameters:
  APIKey:
    Description: "The Token for your Prisms account"
    Type: String
  VPCid:
    Description: 'VPC ID'
    Type: "AWS::EC2::VPC::Id"
  Subnetid:
    Description: 'Subnet ID'
    Type: "AWS::EC2::Subnet::Id"
  CIDR:
    Type: String
    Description: The CIDR notation of address to access the clients
    Default: '0.0.0.0/0'
  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the EC2 instance.'
    Type: "AWS::EC2::KeyPair::KeyName"
#  IAMUserSSHAccess:
 #   Description: 'Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).'
  #  Type: String
   # Default: false
  #  AllowedValues:
   # - true
    #- false
  CustomAMI:
    Description: AMI ID -- Change if custom AMI is desired
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  InstanceType:
    Description: 'The instance type for the EC2 instance.'
    Type: String
    Default: 't3.micro'
  DesiredInstances:
    Description: 'The number of EC2 instances'
    Type: Number
    Default: 1

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
#  HasIAMUserSSHAccess: !Equals [!Ref IAMUserSSHAccess, 'true']
#  UsePreRelease: !Equals [!Ref DockerPreRelease, 'true']

Resources:
  # Security Groups
  # The Security Group placed on the clients themselves
  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Client Security Group
      VpcId: !Ref 'VPCid'
  # Inbound- allow ssh
  SecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "ClientSecurityGroup"
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: !Ref "CIDR"
  # Outbound- allow all
  ClientSecurityGroupOutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref "ClientSecurityGroup"
      CidrIp: 0.0.0.0/0
      IpProtocol: "-1"
      FromPort: '-1'
      ToPort: '-1'

#  SecurityGroup:
 #   Type: AWS::EC2::SecurityGroup
  #  Properties:
   #   GroupDescription: !Sub ${AWS::StackName}
    #  VpcId: !Sub ${VPCid}

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRole

  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: asg
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'autoscaling:DescribeAutoScalingGroups'
            - 'autoscaling:DescribeAutoScalingInstances'
            - 'ec2:DescribeInstances'
            Resource:
            - '*'


  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # AvailabilityZones: !Ref AvailabilityZones
      VPCZoneIdentifier:
      - Ref: Subnetid
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 0
      MaxSize: 200
      DesiredCapacity: !Ref DesiredInstances
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupInServiceInstances
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}
        PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref DesiredInstances
        MaxBatchSize: '1'
        PauseTime: PT10M
        SuspendProcesses:
        - AlarmNotification
        WaitOnResourceSignals: 'true'

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          # List the configSets and the config keys they contain:
          Install:
            - "installServices"
            - "installPrismsAgent"
        # Config key: installServices
        installServices:
          packages:
            yum:
              docker: []
              git: []
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
       #  Config key: installPrismsAgent
        installPrismsAgent:
          commands:
            01_download_and_install:
              command:
                !Sub |
                  docker run -v /:/host -v /var/run/docker.sock:/var/run/docker.sock --privileged --name nubeva-agent -d --restart=on-failure --net=host nubeva/nuagent --accept-eula --nutoken ${APIKey}
            02_installTools:
              command: "git clone https://github.com/nubevalabs/NubevaTools.git /opt/NubevaTools"

    Properties:
      ImageId: !Ref CustomAMI
      InstanceType: !Ref InstanceType
      SecurityGroups:
      - !Ref "ClientSecurityGroup"
      IamInstanceProfile: !Ref InstanceProfile
      AssociatePublicIpAddress: "true"
      KeyName:
        Ref: KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration --configsets Install
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
