AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  APIKey:
    Description: "The Token for your Prisms account"
    Type: String
  ToolAdmin:
    Description: The user name that is associated with the admin account for the tools that are being created.
    Type: String
    Default: tooladmin
    MinLength: 4
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only 4-16 alphanumeric characters.
  ToolPassword:
    Description: The password that is associated with the master user account for the cluster that is being created.
    NoEcho: true
    Type: String
    MinLength: 8
    MaxLength: 32
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only 8-32 alphanumeric characters
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC to install into.
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances. We recommend
      that you set this value to a trusted IP range.
    Type: String
  PublicSubnet1ID:
    Description: Subnet Id for Public Subnet1
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: Subnet Id for Public Subnet2
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet1ID:
    Description: Subnet Id for Private Subnet1
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: Subnet Id for Private Subnet2
    Type: AWS::EC2::Subnet::Id
  NumberOfNodes:
    Description: 'The number of EC2 instances'
    Type: Number
    Default: 2
  MaximumNodes:
    Type: Number
    Default: 6
    Description: Maximum number of instances that can be launched in your tool cluster.
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  NodeInstanceType:
    Description: EC2 instance type
    Type: String
    Default: m5.large
    AllowedValues:
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    - r5.large
    - r5.xlarge
    - r5.2xlarge
    - r5.4xlarge
    - r5.12xlarge
    - r5.24xlarge
    ConstraintDescription: Please choose a valid instance type.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Nubeva configuration
        Parameters:
        - APIKey
        - ToolAdmin
        - ToolPassword
      - Label:
          default: "Network Configuration"
        Parameters:
          - VPCID
          - RemoteAccessCIDR
      - Label:
          default: "Autoscaling Configuration"
        Parameters:
          - KeyPairName
          - NodeInstanceType
          - NumberOfNodes
          - MaximumNodes

Mappings:
  AWSAMIRegionMap:
    AMI:
      awslinux2: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    ap-northeast-1:
      awslinux2: "ami-0c3fd0f5d33134a76"
    ap-northeast-2:
      awslinux2: "ami-095ca789e0549777d"
    ap-south-1:
      awslinux2: "ami-0d2692b6acea72ee6"
    ap-southeast-1:
      awslinux2: "ami-01f7527546b557442"
    ap-southeast-2:
      awslinux2: "ami-0dc96254d5535925f"
    eu-central-1:
      awslinux2: "ami-0cc293023f983ed53"
    eu-north-1:
      awslinux2: "ami-3f36be41"
    eu-west-1:
      awslinux2: "ami-0bbc25e23a7640b9b"
    eu-west-2:
      awslinux2: "ami-0d8e27447ec2c8410"
    eu-west-3:
      awslinux2: "ami-0adcddd3324248c4c"
    us-east-1:
      awslinux2: "ami-0b898040803850657"
    us-east-2:
      awslinux2: "ami-0d8f6eb4f641ef691"
    us-west-1:
      awslinux2: "ami-056ee704806822732"
    us-west-2:
      awslinux2: "ami-082b5a644766e0e6f"
    ca-central-1:
      awslinux2: "ami-0d4ae09ec9361d8ac"
    sa-east-1:
      awslinux2: "ami-058943e7d9b9cabfb"

Resources:
  BaseESSLR:
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: es.amazonaws.com
      Description: Default ES Service Linked IAM Role
  ZeekESSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: BaseESSLR
    Properties:
      GroupDescription: Zeek ElasticSearch Service Security Group
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          CidrIp: !Ref 'VPCCIDR'
  ToolSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Tool Security Group
      VpcId: !Ref 'VPCID'
  # Inbound- allow ssh
  SecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "ToolSecurityGroup"
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref "RemoteAccessCIDR"
  # Inbound- allow VXLAN
  ToolSecurityGroupVXLANinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "ToolSecurityGroup"
      CidrIp: !Ref 'VPCCIDR'
      IpProtocol: udp
      FromPort: 4789
      ToPort: 4789
  # Inbound- allow Zeek
  ToolSecurityGroupntopinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "ToolSecurityGroup"
      IpProtocol: tcp
      FromPort: 8005
      ToPort: 8005
      CidrIp: !Ref "RemoteAccessCIDR"
  # Outbound- allow all
  ToolSecurityGroupOutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref "ToolSecurityGroup"
      CidrIp: 0.0.0.0/0
      IpProtocol: "-1"
      FromPort: -1
      ToPort: -1

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRole

  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: asg
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'autoscaling:DescribeAutoScalingGroups'
            - 'autoscaling:DescribeAutoScalingInstances'
            - 'ec2:DescribeInstances'
            Resource:
            - '*'

  ZeekElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: zeek-es
      ElasticsearchVersion: '6.8'
      ElasticsearchClusterConfig:
        InstanceCount: !Ref NumberOfNodes
        InstanceType: !Sub
          - ${InstanceType}.elasticsearch
          - InstanceType: !Ref NodeInstanceType
        ZoneAwarenessEnabled: true
        ZoneAwarenessConfig:
          AvailabilityZoneCount: 2
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 100
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: '*'
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: 'true'
      VPCOptions:
        SubnetIds:
          - !Ref PrivateSubnet1ID
          - !Ref PrivateSubnet2ID
        SecurityGroupIds:
          - !Ref ZeekESSecurityGroup

  ZeekELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ZeekELB
      Subnets:
          - !Ref PublicSubnet1ID
          - !Ref PublicSubnet2ID
      Type: network
      Scheme: internal

  ZeekCaptureListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ZeekELB
      Port: 4789
      Protocol: UDP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ZeekVXLANTargetGroup

  ZeekVXLANTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCID
      Port: 4789
      Protocol: UDP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      HealthCheckPort: '22'

  ZeekELBTrafficMirrorTarget:
    Type: AWS::EC2::TrafficMirrorTarget
    Properties:
      Description: "ZeekELB"
      NetworkLoadBalancerArn: !Ref ZeekELB

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ZeekElasticsearchDomain
    Properties:
      VPCZoneIdentifier:
      - !Ref PrivateSubnet1ID
      - !Ref PrivateSubnet2ID
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '1'
      MaxSize: !Ref 'MaximumNodes'
      TargetGroupARNs:
        - !Ref ZeekVXLANTargetGroup
      DesiredCapacity: !Ref 'NumberOfNodes'
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupInServiceInstances
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref NumberOfNodes
        MaxBatchSize: 1
        PauseTime: PT5M
        SuspendProcesses:
        - AlarmNotification
        WaitOnResourceSignals: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Configure:
            - "ConfigStartup"
          Install:
            - "InstallServices"
            - "SetupElastic"
            - "InstallNurxAgent"
            - "InstallZeek"
          Start:
            - "StartZeek"

        ConfigStartup:
          commands:
            01_chmod:
              command: "chmod +x /etc/rc.d/rc.local"
        InstallServices:
          packages:
            yum:
              libpcap-devel: []
              openssl-devel: []
              python-devel: []
              zlib-devel: []
              java-1.8.0-openjdk: []
              wget: []
              docker: []
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
        SetupElastic:
          commands:
            01_setES_pubkeys:
              command: "rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch"
            02_get_repo_info:
              command: "wget -nv https://raw.githubusercontent.com/nubevalabs/templates/master/elastic.repo -O /etc/yum.repos.d/elastic.repo"
            03_get_ZeekEepo_info:
              command: "wget -nv https://download.opensuse.org/repositories/security:zeek/CentOS_7/security:zeek.repo -O /etc/yum.repos.d/security:zeek.repo"
        InstallNurxAgent:
          commands:
            01_download_and_install:
              command:
                !Sub |
                  docker run -v /:/host -v /var/run/docker.sock:/var/run/docker.sock --cap-add NET_ADMIN --name nubeva-rx -d --restart=on-failure --net=host nubeva/nurx --accept-eula --nutoken ${APIKey}
        #InstallVXLANInterface:
        #  commands:
        #    01_createVXLAN:
        #      command: "ip link add vxlan555 type vxlan id 555 remote 0.0.0.0 dstport 4789"
        #    02_interfaceUp:
        #      command: "ip link set vxlan555 up"
        #    03_autoLaunchVXLAN:
        #      command: "echo 'ip link add vxlan555 type vxlan id 555 remote 0.0.0.0 dstport 4789' >> /etc/rc.local"
        #    04_addsmorerclocalupdate:
        #      command: "echo 'ip link set vxlan555 up' >> /etc/rc.local"
        InstallZeek:
          packages:
            yum:
              zeek: []
              logstash: []
          commands:
            01_configLogstash:
              command: "/usr/share/logstash/bin/system-install"
            02_setLogstashRegion:
              command:
                !Sub |
                  echo 'REGION='${AWS::Region} >> /etc/default/logstash
            03_setLogstashES:
              command: "echo 'ES_HOST='${ESDomain} >> /etc/default/logstash"
              env:
                ESDomain: !GetAtt ZeekElasticsearchDomain.DomainEndpoint
            04_installConfig:
              command: "wget -nv https://raw.githubusercontent.com/nubevalabs/templates/master/logstash-zeek.conf -O /etc/logstash/conf.d/logstash-zeek.conf"
            05_setupLogstash:
              command: "/usr/share/logstash/bin/logstash-plugin install logstash-filter-geoip && /usr/share/logstash/bin/logstash-plugin install logstash-output-amazon_es && /usr/share/logstash/bin/logstash-plugin install logstash-filter-translate"
            06_zeekAccess:
              command: "usermod -a -G zeek logstash"
          services:
            sysvinit:
              logstash:
                enabled: true
                ensureRunning: true
        StartZeek:
          commands:
            01_addUpdaterclocal:
              command: "echo 'yum update -y' >> /etc/rc.local"
            02_runZeekAlways:
              command: "echo '/opt/zeek/bin/start_zeek.sh' >> /etc/rc.local"
            03_installStartScript:
              command: "wget -nv https://raw.githubusercontent.com/nubevalabs/templates/master/start_zeek.sh -O /opt/zeek/bin/start_zeek.sh"
            04_allowExecute:
              command: "chmod +x /opt/zeek/bin/start_zeek.sh"
            05_startZeek:
              command: "/opt/zeek/bin/start_zeek.sh"

    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          yum update -y
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration --configsets Configure,Install,Start
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
      InstanceType: !Ref NodeInstanceType
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - awslinux2
      SecurityGroups:
      - !Ref "ToolSecurityGroup"
      IamInstanceProfile: !Ref InstanceProfile
      KeyName:
        Ref: KeyPairName
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize: 100
Outputs:
  Login:
    Description: The username & password defaults are in the documentation
    Value: "https://docs.nubeva.com/zeek"
  URL:
    Description: The URL for the Zeek Kibana Dashboard
    Value: !Sub
        - "http://${ZeekES}/_plugin/kibana/"
        - ZeekES: !GetAtt ZeekElasticsearchDomain.DomainEndpoint
