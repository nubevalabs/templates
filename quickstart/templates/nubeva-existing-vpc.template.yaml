AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys Nubeva TLS Decrypt & Open Source Tools (qs-1qg4tqp9n)
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Launch into an existing VPC"
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: VPC network configuration
      Parameters:
      - VPCID
      - VPCCIDR
      - PrivateSubnet1ID
      - PrivateSubnet2ID
      - RemoteAccessCIDR
    - Label:
        default: Nubeva configuration
      Parameters:
      - APIKey
      - FastKeyDNS
      - WiresharkInstall
      - SuricataInstall
      - ZeekInstall
      - ClientInstall
      - ToolAdmin
      - ToolPassword
      - AddESRole
    - Label:
        default: Auto Scaling group configuration
      Parameters:
      - KeyPairName
      - NodeInstanceType
      - NumberOfNodes
      - MaximumNodes
    - Label:
        default: AWS Quick Start configuration
      Parameters:
      - QSS3BucketName
      - QSS3BucketRegion
      - QSS3KeyPrefix
    ParameterLabels:
      WiresharkInstall:
        default: Install Wireshark ASG
      SuricataInstall:
        default: Install Suricata ASG
      ZeekInstall:
        default: Install Zeek ASG
      ClientInstall:
        default: Install TLS generation clients
      AddESRole:
        default: Install Elasticsearch service-linked role
      ToolAdmin:
        default: Administrator name
      ToolPassword:
        default: Administrator password
      KeyPairName:
        default: SSH key name
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3BucketRegion:
        default: Quick Start S3 bucket Region
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      RemoteAccessCIDR:
        default: Allowed external access CIDR
      NodeInstanceType:
        default: Node instance type
      NumberOfNodes:
        default: Number of nodes
      MaximumNodes:
        default: Maximum nodes per tool
      PrivateSubnet1ID:
        default: Private subnet 1 ID
      PrivateSubnet2ID:
        default: Private subnet 2 ID
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: VPC CIDR
      APIKey:
        default: Nubeva token
      FastKeyDNS:
        default: FastKey Server FQDN

Parameters:
  WiresharkInstall:
    Default: true
    AllowedValues:
    - true
    - false
    Description: Choose to install Wireshark.
    Type: String
  SuricataInstall:
    Default: true
    AllowedValues:
    - true
    - false
    Description: Choose to install Suricata.
    Type: String
  ZeekInstall:
    Default: true
    AllowedValues:
    - true
    - false
    Description: Choose to install Zeek.
    Type: String
  ClientInstall:
    Default: true
    AllowedValues:
    - true
    - false
    Description: Choose to install TLS generation clients.
    Type: String
  AddESRole:
    Default: false
    AllowedValues:
    - true
    - false
    Description: Choose to install Elasticsearch service-linked role.
    Type: String
  KeyPairName:
    Description: Name of an existing key pair, which allows you
      to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName
  ToolAdmin:
    Description: User name associated with the administrator account for the created tools.
    Type: String
    Default: tooladmin
    MinLength: 4
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only 4-16 alphanumeric characters.
  ToolPassword:
    Description: Must contain only 8-32 alphanumeric characters.
    NoEcho: true
    Type: String
    MinLength: 8
    MaxLength: 32
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only 8-32 alphanumeric characters
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: "The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value."
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-nubeva-tlsdecrypt/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: CIDR IP range permitted to access the instances. We recommend that you set this value to a trusted IP range.
    Type: String
  NodeInstanceType:
    Default: m5.large
    AllowedValues:
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.18xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    - r5.large
    - r5.xlarge
    - r5.2xlarge
    - r5.4xlarge
    - r5.12xlarge
    - r5.24xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
    Description: Type of EC2 instance for the node instances.
    Type: String
  NumberOfNodes:
    Default: 2
    Description: Number of tool node instances. The default is one for each of the two Availability Zones.
    Type: Number
  MaximumNodes:
    Default: 6
    Description: Maximum number of EC2 instance nodes in the tool Auto Scaling group.
    Type: String
  APIKey:
    Description: Token for your Nubeva account.
    Type: String
  VPCID:
    Type: "AWS::EC2::VPC::Id"
    Description: ID of your existing VPC (for example, vpc-0343606e).
  PrivateSubnet1ID:
    Type: "AWS::EC2::Subnet::Id"
    Description: ID of the private subnet in Availability Zone 1 in your existing VPC (for example, subnet-fe9a8b32).
  PrivateSubnet2ID:
    Type: "AWS::EC2::Subnet::Id"
    Description: ID of the private subnet in Availability Zone 2 in your existing VPC (for example, subnet-be8b01ea).
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.
    Type: String
  FastKeyDNS:
    Description: FastKey Server Domain Name
    Type: String

Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  WiresharkInstallTrue: !Equals
    - !Ref WiresharkInstall
    - 'true'
  SuricataInstallTrue: !Equals
    - !Ref SuricataInstall
    - 'true'
  ZeekInstallTrue: !Equals
    - !Ref ZeekInstall
    - 'true'
  ESRoleInstallTrue: !Equals
    - !Ref AddESRole
    - 'true'

Mappings:
  AWSAMIRegionMap:
    AMI:
      awslinux2: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    ap-northeast-1:
      awslinux2: "ami-0c3fd0f5d33134a76"
    ap-northeast-2:
      awslinux2: "ami-095ca789e0549777d"
    ap-south-1:
      awslinux2: "ami-0d2692b6acea72ee6"
    ap-southeast-1:
      awslinux2: "ami-01f7527546b557442"
    ap-southeast-2:
      awslinux2: "ami-0dc96254d5535925f"
    eu-central-1:
      awslinux2: "ami-0cc293023f983ed53"
    eu-north-1:
      awslinux2: "ami-3f36be41"
    eu-west-1:
      awslinux2: "ami-0bbc25e23a7640b9b"
    eu-west-2:
      awslinux2: "ami-0d8e27447ec2c8410"
    eu-west-3:
      awslinux2: "ami-0adcddd3324248c4c"
    us-east-1:
      awslinux2: "ami-0b898040803850657"
    us-east-2:
      awslinux2: "ami-0d8f6eb4f641ef691"
    us-west-1:
      awslinux2: "ami-056ee704806822732"
    us-west-2:
      awslinux2: "ami-082b5a644766e0e6f"
    ca-central-1:
      awslinux2: "ami-0d4ae09ec9361d8ac"
    sa-east-1:
      awslinux2: "ami-058943e7d9b9cabfb"

Resources:
  BaseESSLR:
    Condition: ESRoleInstallTrue
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: es.amazonaws.com
      Description: Default ES Service Linked IAM Role

  WiresharkStack:
    Condition: WiresharkInstallTrue
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/nubeva-wireshark.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        KeyPairName: !Ref KeyPairName
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !Ref PrivateSubnet2ID
        NumberOfNodes: !Ref NumberOfNodes
        MaximumNodes: !Ref MaximumNodes
        NodeInstanceType: !Ref NodeInstanceType
        RemoteAccessCIDR: !Ref RemoteAccessCIDR
        VPCID: !Ref VPCID
        APIKey: !Ref APIKey
        ToolAdmin: !Ref ToolAdmin
        ToolPassword: !Ref ToolPassword
        VPCCIDR: !Ref VPCCIDR
        FastKeyIP: !GetAtt KeyServer.PrivateIp
        ClientInstall: !Ref ClientInstall
        FastKeyDNS: !Ref FastKeyDNS
        QSS3BucketName: !Ref QSS3BucketName
        QSS3BucketRegion: !Ref QSS3BucketRegion
        QSS3KeyPrefix:  !Ref QSS3KeyPrefix

  SuricataStack:
    Condition: SuricataInstallTrue
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/nubeva-suricata.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        KeyPairName: !Ref KeyPairName
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !Ref PrivateSubnet2ID
        NumberOfNodes: !Ref NumberOfNodes
        MaximumNodes: !Ref MaximumNodes
        NodeInstanceType: !Ref NodeInstanceType
        RemoteAccessCIDR: !Ref RemoteAccessCIDR
        VPCID: !Ref VPCID
        VPCCIDR: !Ref VPCCIDR
        APIKey: !Ref APIKey
        FastKeyIP: !GetAtt KeyServer.PrivateIp
        ClientInstall: !Ref ClientInstall
        FastKeyDNS: !Ref FastKeyDNS
        QSS3BucketName: !Ref QSS3BucketName
        QSS3BucketRegion: !Ref QSS3BucketRegion
        QSS3KeyPrefix:  !Ref QSS3KeyPrefix
  ZeekStack:
    Condition: ZeekInstallTrue
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/nubeva-zeek.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        KeyPairName: !Ref KeyPairName
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !Ref PrivateSubnet2ID
        NumberOfNodes: !Ref NumberOfNodes
        MaximumNodes: !Ref MaximumNodes
        NodeInstanceType: !Ref NodeInstanceType
        RemoteAccessCIDR: !Ref RemoteAccessCIDR
        VPCID: !Ref VPCID
        VPCCIDR: !Ref VPCCIDR
        APIKey: !Ref APIKey
        FastKeyIP: !GetAtt KeyServer.PrivateIp
        ClientInstall: !Ref ClientInstall
        FastKeyDNS: !Ref FastKeyDNS
        QSS3BucketName: !Ref QSS3BucketName
        QSS3BucketRegion: !Ref QSS3BucketRegion
        QSS3KeyPrefix:  !Ref QSS3KeyPrefix

  KeyServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: KeyServer Security Group
      VpcId: !Ref 'VPCID'
  KeyServerSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "KeyServerSecurityGroup"
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref "RemoteAccessCIDR"
  KeyServerSecurityGroupAPIinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "KeyServerSecurityGroup"
      CidrIp: !Ref 'VPCCIDR'
      IpProtocol: tcp
      FromPort: 4433
      ToPort: 4433
  KeyServerSecurityGroupDTLSinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "KeyServerSecurityGroup"
      CidrIp: !Ref 'VPCCIDR'
      IpProtocol: udp
      FromPort: 4433
      ToPort: 4433
  KeyServerSecurityGroupOutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref "KeyServerSecurityGroup"
      CidrIp: 0.0.0.0/0
      IpProtocol: "-1"
      FromPort: -1
      ToPort: -1
#-------
#  KeyServerInstanceProfile:
#    Type: 'AWS::IAM::InstanceProfile'
#    Properties:
#      Path: '/'
#      Roles:
#      - !Ref KeyServerIAMRole
#
#  KeyServerIAMRole:
#    Type: 'AWS::IAM::Role'
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#        - Effect: Allow
#          Principal:
#            Service:
#            - 'ec2.amazonaws.com'
#          Action:
#          - 'sts:AssumeRole'
#      Path: '/'
#      Policies:
#      - PolicyName: KeyServerASGPolicy
#        PolicyDocument:
#          Version: '2012-10-17'
#          Statement:
#          - Effect: Allow
#            Action:
#            - 'autoscaling:DescribeAutoScalingGroups'
#            - 'autoscaling:DescribeAutoScalingInstances'
#            Resource:
#            - '*'
#
#  KeyServerELB:
#    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#    Properties:
#      Subnets:
#          - !Ref PrivateSubnet1ID
#          - !Ref PrivateSubnet2ID
#      Type: network
#      Scheme: internal
#  KeyServerDTLSListener:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    Properties:
#      LoadBalancerArn: !Ref KeyServerELB
#      Port: 4433
#      Protocol: TCP_UDP
#      DefaultActions:
#        - Type: forward
#          TargetGroupArn: !Ref KeyServerDTLSTargetGroup
#  KeyServerSigListener:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    Properties:
#      LoadBalancerArn: !Ref KeyServerELB
#      Port: 8080
#      Protocol: TCP
#      DefaultActions:
#        - Type: forward
#          TargetGroupArn: !Ref KeyServerSigTargetGroup
#  KeyServerDTLSTargetGroup:
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#    Properties:
#      VpcId: !Ref VPCID
#      Port: 4433
#      Protocol: TCP_UDP
#      HealthCheckEnabled: true
#      HealthCheckIntervalSeconds: 10
#      HealthCheckProtocol: TCP
#      HealthCheckTimeoutSeconds: 10
#      HealthyThresholdCount: 3
#      UnhealthyThresholdCount: 3
#  KeyServerSigTargetGroup:
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#    Properties:
#      VpcId: !Ref VPCID
#      Port: 8080
#      Protocol: TCP
#      HealthCheckEnabled: true
#      HealthCheckIntervalSeconds: 10
#      HealthCheckProtocol: TCP
#      HealthCheckTimeoutSeconds: 10
#      HealthyThresholdCount: 3
#      UnhealthyThresholdCount: 3
#  KeyServerELBTrafficMirrorTarget:
#    Type: AWS::EC2::TrafficMirrorTarget
#    Properties:
#      Description: "KeyServerELB"
#      NetworkLoadBalancerArn: !Ref KeyServerELB
#  KeyServerAutoScalingGroup:
#    Type: AWS::AutoScaling::AutoScalingGroup
#    Properties:
#      VPCZoneIdentifier:
#      - !Ref PrivateSubnet1ID
#      - !Ref PrivateSubnet2ID
#      LaunchConfigurationName: !Ref KeyServerLaunchConfiguration
#      MinSize: '1'
#      MaxSize: !Ref 'MaximumNodes'
#      TargetGroupARNs:
#        - !Ref KeyServerSigTargetGroup
#        - !Ref KeyServerDTLSTargetGroup
#      DesiredCapacity: '1'
#      MetricsCollection:
#      - Granularity: 1Minute
#        Metrics:
#        - GroupInServiceInstances
#      Tags:
#      - Key: Name
#        Value: !Sub ${AWS::StackName}
#        PropagateAtLaunch: true
#    CreationPolicy:
#      ResourceSignal:
#        Count: 1
#        Timeout: PT10M
#    UpdatePolicy:
#      AutoScalingRollingUpdate:
#        MaxBatchSize: 1
#        PauseTime: PT5M
#        SuspendProcesses:
#        - AlarmNotification
#        WaitOnResourceSignals: true
#
#  KeyServerLaunchConfiguration:
#    Type: AWS::AutoScaling::LaunchConfiguration
#    Metadata:
#      AWS::CloudFormation::Init:
#        configSets:
#          Configure:
#            - "ConfigStartup"
#          Install:
#            - "InstallServices"
#          Start:
#            - "StartKeyServer"
#        ConfigStartup:
#          commands:
#            01_updaterclocal:
#             command: "echo 'yum update -y' >> /etc/rc.local"
#            02_chmod:
#              command: "chmod +x /etc/rc.d/rc.local"
#        InstallServices:
#          packages:
#            yum:
#              wget: []
#              docker: []
#          services:
#            sysvinit:
#              docker:
#                enabled: true
#                ensureRunning: true
#          commands:
#            00_dockergroup:
#              command: "sudo usermod -a -G docker ec2-user"
#        StartKeyServer:
#          commands:
#            00_etc-hosts:
#              command: "echo '127.0.0.1    key.nubedge.com' >> /etc/hosts"
#            02_KeyServer:
#              command: "docker run -p 4433:4433/TCP -p 4433:4433/UDP --name nubeva-ks -dit  nubevalab/nubeva-ks"
#    Properties:
#      UserData:
#        Fn::Base64: !Sub |
#          #!/bin/bash -xe
#          amazon-linux-extras install epel -y
#          yum update -y
#          yum update -y aws-cfn-bootstrap
#          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource KeyServerLaunchConfiguration --configsets Configure,Install,Start
#          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource KeyServerAutoScalingGroup
#      InstanceType: !Ref NodeInstanceType
#      ImageId: !FindInMap
#        - AWSAMIRegionMap
#        - !Ref 'AWS::Region'
#        - awslinux2
#      SecurityGroups:
#      - !Ref "KeyServerSecurityGroup"
#      IamInstanceProfile: !Ref KeyServerInstanceProfile
#      KeyName:
#        Ref: KeyPairName
#---------
  KeyServer:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Configure:
            - "ConfigStartup"
          Install:
            - "InstallServices"
          Start:
            - "StartKeyServer"
        ConfigStartup:
          commands:
            01_updaterclocal:
             command: "echo 'yum update -y' >> /etc/rc.local"
            02_chmod:
              command: "chmod +x /etc/rc.d/rc.local"
        InstallServices:
          packages:
            yum:
              wget: []
              docker: []
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
          commands:
            00_dockergroup:
              command: "sudo usermod -a -G docker ec2-user"
        StartKeyServer:
          commands:
            00_etc-hosts:
              command: "echo '127.0.0.1    key.nubedge.com' >> /etc/hosts"
            01_createdirectory:
              command: "mkdir /opt/nubevaTools"
            01a_downloadnudemobundle:
              command: "curl -o /opt/nubevaTools/nudemo-bundle.tar.gz https://raw.githubusercontent.com/ejfree/dockerfiles/master/nudemo-bundle.tar.gz"
            01b_installcerts:
              command: "tar -xzvf /opt/nubevaTools/nudemo-bundle.tar.gz -C /opt/nubevaTools"
            02_FastKeyServer:
              command: "docker run --name nubeva-ks -d -p4433:4433/tcp -p4433:4433/udp  -v /opt/nubevaTools:/certs nubeva/fastkey --cert /certs/nubedge.pem --key /certs/nubedge.key"

    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          amazon-linux-extras install epel -y
          yum update -y
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource KeyServer --configsets Configure,Install,Start
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource KeyServer
      InstanceType: !Ref NodeInstanceType
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - awslinux2
      SecurityGroupIds:
          - !GetAtt "KeyServerSecurityGroup.GroupId"
      KeyName:
        Ref: KeyPairName
      SubnetId: !Ref PrivateSubnet1ID
      Tags:
      - Key: Name
        Value: !Sub "Fastkey Server-${AWS::StackName}"
